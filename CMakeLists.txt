cmake_minimum_required(VERSION 3.9)
project(MeshViewer)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

# set cmake module path
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
set(HEADER_PATH ${PROJECT_SOURCE_DIR}/include)

include_directories(${HEADER_PATH})
include_directories(${PROJECT_SOURCE_DIR}/3rdparty)
include_directories(${PROJECT_SOURCE_DIR}/3rdparty/ANN/include)

message("CMAKE_SOURCE_DIR = ${CMAKE_SOURCE_DIR}")
message("CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}")
message("CMAKE_CURRENT_BINARY_DIR = ${CMAKE_CURRENT_BINARY_DIR}")


option(USE_EIGEN     "Use Eigen"          ON)
option(USE_OPENMESH  "Use OpenMesh"       ON)
option(USE_OPENCV    "Use OpenCV"         OFF)
option(USE_QT5       "Use Qt5"            ON)
option(USE_OPENGL    "Use OpenGL"         ON)
option(USE_GLUT      "Use GLUT"           ON)
option(USE_GLEW      "Use GLEW"           OFF)

message(STATUS "------------------------------------")
message(STATUS "| USE_EIGEN     " ${USE_EIGEN})
message(STATUS "| USE_OPENCV    " ${USE_OPENCV})
message(STATUS "| USE_OPENMESH  " ${USE_OPENMESH})
message(STATUS "| USE_QT5       " ${USE_QT5})
message(STATUS "------------------------------------")

# Additional compiler flags
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    message("Clang compiler found.")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    message("AppleClang compiler found.")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    message("GNU compiler found.")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    message("MSVC compiler found.")
    add_definitions(/DUSE_MSVC)
    add_definitions(/D_USE_MATH_DEFINES)
endif()


if(WIN32)
   set(QT_PATH "C:/Qt/5.13.0/msvc2017_64")
elseif(APPLE)
    set(QT_PATH "/Users/liwei/Qt5.10.0/5.10.0/clang_64/lib/cmake")
else(UNIX)
endif(WIN32)
list(APPEND CMAKE_PREFIX_PATH ${QT_PATH})
# set(QT_QMAKE_EXECUTABLE ${QT_PATH}/bin/qmake.exe)
# set(Qt5_DIR ${QT_PATH}/lib/cmake/Qt5)
# set(Qt5Core_DIR ${QT_PATH}/lib/cmake/Qt5Core)

message("CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")

if (USE_QT5)
    # https://doc.qt.io/qt-5/cmake-manual.html
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set(CMAKE_AUTOMOC ON)
    # set(CMAKE_AUTOUIC ON)
    # set(CMAKE_AUTORCC ON)
    find_package(Qt5Core REQUIRED)
    find_package(Qt5Gui REQUIRED)
    find_package(Qt5Widgets REQUIRED)
    find_package(Qt5OpenGL REQUIRED)
endif ()

if (USE_OPENMESH)
    # OpenMesh library
    set(OPENMESH_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/OpenMesh/Core")
    file(GLOB_RECURSE OPENMESH_HEADERS "${OPENMESH_SOURCE_DIR}/*.hh" "${OPENMESH_SOURCE_DIR}/*.h")
    file(GLOB_RECURSE OPENMESH_SOURCES "${OPENMESH_SOURCE_DIR}/*.cc")
    add_library(OpenMesh STATIC ${OPENMESH_HEADERS} ${OPENMESH_SOURCES})
    add_definitions(-DOM_STATIC_BUILD)
    message(STATUS "use OpenMesh for project")
endif ()

if (USE_EIGEN)
    find_package(Eigen3 REQUIRED)
    include_directories(${EIGEN3_INCLUDE_DIR})
    message(STATUS "use Eigen " ${EIGEN3_VERSION_STRING} " for project")
endif()

if(USE_OPENGL)
    message(STATUS "Use OpenGL")
    if(USE_X11)
        set(OPENGL_INCLUDE_DIR /opt/X11/include)
        set(OPENGL_gl_LIBRARY /opt/X11/lib/libGL.dylib)
        set(OPENGL_glu_LIBRARY /opt/X11/lib/libGLU.dylib)
    endif(USE_X11)
    find_package(OpenGL REQUIRED)
    if(OPENGL_FOUND)
        include_directories(${OPENGL_INCLUDE_DIRS})
        set(OpenGL_LIBS ${OPENGL_LIBRARIES})
    else()
        message(WARNING "OpenGL not found")
    endif(OPENGL_FOUND)
endif()

# GLUT
if(USE_GLUT)
    find_package(GLUT REQUIRED)
    if(GLUT_FOUND)
        include_directories(${GLUT_INCLUDE_DIRS})
        set(OpenGL_LIBS ${OpenGL_LIBS} ${GLUT_LIBRARY})
        message(STATUS "Use GLUT")
    else()
        message(WARNING "GLUT not found")
    endif(GLUT_FOUND)
endif()

# GLEW
if(USE_GLEW)
    find_package(GLEW REQUIRED)
    if (GLEW_FOUND)
        include_directories(${GLEW_INCLUDE_DIRS})
        set(OpenGL_LIBS ${OpenGL_LIBS} ${GLEW_LIBRARIES})
        message(STATUS "Use GLEW")
    else()
        message(WARNING "GLEW not found")
    endif()
endif()

# find_package(GLUT REQUIRED)
# find_package(OpenGL REQUIRED)
add_definitions(-DGL_SILENCE_DEPRECATION)

add_subdirectory(3rdparty)
add_subdirectory(MeshViewer)
